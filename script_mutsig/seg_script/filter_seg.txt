//dir=getDirectory("mouse");
//print(dir)
setBatchMode(true);

function GetTime() {
     getDateAndTime(year, month, dayOfWeek, dayOfMonth, hour, minute, second, msec);
     TimeString ="Time:    ";
     if (hour<10) {TimeString = TimeString+"0";}
     TimeString = TimeString+hour+":";
     if (minute<10) {TimeString = TimeString+"0";}
     TimeString = TimeString+minute+":";
     if (second<10) {TimeString = TimeString+"0";}
     TimeString = TimeString+second;
     print(TimeString);
}





dir = getArgument;
//dir="/Users/hoatran/Documents/storage_tmp/test/";  //just for testing

if (dir=="") 
	exit ("No argument!");

print("Working dir: "+dir+"\n");


// Parameters setting
vol_min=20; //mimimum of area - 2D object, or volume - 3D object that consider object, otherwise can be noise area, discard it
spot_seeds_threshold=25000; //#similar to threshold 120/255 in 8 bits image, here in 16 images, we can use threshold of [25000, 30000] for low intensity images,  [30000,45000] for high intensity images to get spots - center of objects that above this threshold, if this threshold is low, program run slowly

minSize=5;  //minimum diameter of object 
maxSize=9;  //maximum diameter of object 
input_dir = dir+"NUC/";   //input dir should contain a NUC sub folder
output_dir = dir+"NUC_SEG/";
//input_dir = dir;
print("Input nuc dir: "+input_dir+"\n");
print("Output nuc dir: "+output_dir+"\n");
if(!File.exists(input_dir))
  exit("Input dir does not exist, double check input directory setting!");

if(!File.exists(output_dir)) 
      File.mkdir(output_dir);
      


files=getFileList(input_dir);
print("Nb of processing images: "+files.length+"\n");
count=0;
for(f=0;f<files.length;f++)
{
     //if(!File.isDirectory(input_dir+files[f])) {
				name=files[f];
				
				if(endsWith(name,'_NUC.tif')){  //input image should end with _NUC.tif
					//print("Get the right channel : "+name);
          count=count+1;
          
					short_name = substring(name,0,indexOf(name,'_NUC.tif'));					
					print(count+"_______________________________________\n");
					//print(name);
					//open(dir+name);
					//run("Stack to Images");
					//selectWindow("Blue");
					//setOption("ScaleConversions", true);
					//run("8-bit");
					//run("Grays");
					//saveAs("Tiff",dir+name);
					//run("Close");
          
          seg_output=output_dir+short_name+"_SEG.tif";
          if(File.exists(seg_output)) {
            print("---------------------------");
            print("SEG output is exist, skip this image: "+name);
            print(" ");
          } else{
            print("Loading image: "+name);
            print("---------------------------");
            start = getTime();
            GetTime();
  					open(input_dir+name);
					run("Duplicate...", " ");
					selectWindow(name);	
  					h=getHeight();
  					w=getWidth();
				  	print('Image: '+name+"   h:   "+h+"  w:   "+w);
				  	
            selectWindow(name);
						run("Median...", "radius=2");
						//run("Mean...", "radius=2");
						run("32-bit");
			      run("Bandpass Filter...", "filter_large="+maxSize+" filter_small="+minSize+" suppress=None tolerance=5");
						run("Enhance Contrast...", "saturated=0");
						run("16-bit");
						
						//saveAs("Tiff",input_dir+"FILTERED/"+"BP_"+name);
						//open(input_dir+"FILTERED/"+"BP_"+name);
						//selectWindow("BP_"+name);
						rename("BP_dapi");
						//mean=spot_seeds_threshold; //just in case program has problem
						getStatistics(area, mean, min, max, std);
						print(getTitle+"  mean: "+mean);
						
						if(spot_seeds_threshold<mean){
							spot_seeds_threshold=mean+500;  //spot seed should at least greater than mean value otherwise program run slowly like a turtle
							print("_________________________________________");
							print("ATTENTION: DEBUG Spot seeds threshold value is:  "+spot_seeds_threshold);
							print(name);
						}
						
						print("Segmenting...");
						
						// usually seeds_threshold=30000
						run("3D Spot Segmentation", "seeds_threshold="+spot_seeds_threshold+" local_background=0 radius_0=2 radius_1=4 radius_2=6 weigth=0.50 radius_max=20 sd_value=1.90 local_threshold=[Gaussian fit] seg_spot=Block watershed volume_min="+vol_min+" volume_max=100000 seeds=Automatic spots=BP_dapi radius_for_seeds=2 output=[Label Image]"); 
						
						selectWindow("seg");
						run("3-3-2 RGB");
					 	saveAs("Tiff",seg_output);
					 	
					 	
					 	// Save ROI, draw segmented area into raw image for validation
					 	short_name2 = substring(name,0,indexOf(name,'.tif')) + "-1";
					 	roi_output=output_dir+short_name+"_ROI_RAW_SEG.tif";
					 	run("3D Draw Rois", "raw="+short_name2+" seg="+short_name+"_SEG");
            saveAs("Tiff", roi_output);
            run("Close All");
					 	print("Time of execution is: "+(getTime()-start)/1000); 
					 	GetTime();
		 	      print(" ");
				 	
          }
					//run("Close All");  //diable it if you want to test and display images
					// Script just to make sure to close all windows, can remove this part below if you are sure there are only images windows. 	
					list = getList("window.titles");
			    for (i=0; i<list.length; i++){
			    	winame = list[i];
			      selectWindow(winame);
			     	//run("Close"); //diable it if you want to test and display images
			    } 

					
					
           }
           
    //}

}
print("_________________________\n");
print("Nb of processed images:  "+count);
print("Completed");

//if(!File.exists(dir+"log")) File.mkdir(dir+"log");
//selectWindow("Log");
//saveAs("Text", dir+ "segment_log.txt");
setBatchMode(false);








